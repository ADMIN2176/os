                                  Program-6
    Develop a C program to simulate the following contiguous memory allocation
                                Techniques
 a) Worst fit

#include<stdio.h>
int main()
{
 int fragments[10], blocks[10], files[10];
 int m, n, number_of_blocks, number_of_files, temp, top = 0;
static int block_arr[10], file_arr[10];
 printf("\nEnter the Total Number of Blocks:\t");
 scanf("%d",&number_of_blocks);
 printf("Enter the Total Number of Files:\t");
 scanf("%d",&number_of_files);
  printf("\nEnter the Size of the Blocks:\n");
  for(m = 0; m < number_of_blocks; m++)
{
printf("Block No.[%d]:\t", m + 1);
scanf("%d", &blocks[m]);
  }
printf("Enter the Size of the Files:\n");
 for(m = 0; m < number_of_files; m++)
{
printf("File No.[%d]:\t", m + 1);
scanf("%d", &files[m]);
 }
  for(m = 0; m < number_of_files; m++)
{
for(n = 0; n < number_of_blocks; n++)
{
     if(block_arr[n] != 1)
     {
         temp = blocks[n] - files[m];
         if(temp >= 0)
         {
              if(top < temp)
              {
                   file_arr[m] = n;
                   top = temp;
              }
         }
     }
     fragments[m] = top;
     block_arr[file_arr[m]] = 1;
     top = 0;
}
}
printf("\nFile Number\tFile Size\tBlock Number\tBlock Size\tFragment");
for(m = 0; m < number_of_files; m++)
{
printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d", m, files[m], file_arr[m], blocks[file_arr[m]], fragments[m]);
 }
 printf("\n");
return 0;
}
  Output:




 b) Best Fit
  #include<stdio.h>

  void main()
  {
    int fragment[20],b[20],p[20],i,j,nb,np,temp,lowest=9999;
    static int barray[20],parray[20];

    printf("\n\t\t\tMemory Management Scheme - Best Fit");
    printf("\nEnter the number of blocks:");
    scanf("%d",&nb);
    printf("Enter the number of processes:");
    scanf("%d",&np);

    printf("\nEnter the size of the blocks:-\n");
    for(i=1;i<=nb;i++)
    {
       printf("Block no.%d:",i);
       scanf("%d",&b[i]);
    }

    printf("\nEnter the size of the processes :-\n");
    for(i=1;i<=np;i++)
    {
       printf("Process no.%d:",i);
       scanf("%d",&p[i]);
    }

    for(i=1;i<=np;i++)
    {
    for(j=1;j<=nb;j++)
    {
       if(barray[j]!=1)
       {
          temp=b[j]-p[i];
          if(temp>=0)
             if(lowest>temp)
             {
                parray[i]=j;
                lowest=temp;
             }
       }
    }

    fragment[i]=lowest;
    barray[parray[i]]=1;
    lowest=10000;
}

printf("\nProcess_no\tProcess_size\tBlock_no\tBlock_size\tFragment");
for(i=1;i<=np && parray[i]!=0;i++)
   printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d",i,p[i],parray[i],b[parray[i]],fragment[i]);
}
c) First Fit
  #include<stdio.h>
  #define max 25
  void main()
  {
  int frag[max],b[max],f[max],i,j,nb,nf,temp,highest=0;
  static int bf[max],ff[max];
  printf("\n\tMemory Management Scheme - First Fit");
  printf("\nEnter the number of blocks:");
  scanf("%d",&nb);
  printf("Enter the number of files:");
  scanf("%d",&nf);
  printf("\nEnter the size of the blocks:-\n");
  for(i=1;i<=nb;i++)
  {
  printf("Block %d:",i);
  scanf("%d",&b[i]);
  }
  printf("Enter the size of the files :-\n");
  for(i=1;i<=nf;i++)
  {
  printf("File %d:",i);
  scanf("%d",&f[i]);
  }
  for(i=1;i<=nf;i++)
  {
  for(j=1;j<=nb;j++)
  {
  if(bf[j]!=1) //if bf[j] is not allocated
  {
  temp=b[j]-f[i];
  if(temp>=0)
  if(highest<temp)
  {
  ff[i]=j;
  highest=temp;
  }
  }
  }
  frag[i]=highest;
  bf[ff[i]]=1;
  highest=0;
  }
  printf("\nFile_no:\tFile_size :\tBlock_no:\tBlock_size:\tFragement");
  for(i=1;i<=nf;i++)
  printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d",
  i,f[i],ff[i],b[ff[i]],frag[i]);
     }
Output:
                                   Program-7
          Develop a C program to simulate page replacement algorithms

a) FIFO

 #include<stdio.h>
 int main()
 {
 int i,j,n,a[50],frame[10],no,k,avail,count=0;
           printf("\n ENTER THE NUMBER OF PAGES:\n");
 scanf("%d",&n);
           printf("\n ENTER THE PAGE NUMBER :\n");
           for(i=1;i<=n;i++)
           scanf("%d",&a[i]);
           printf("\n ENTER THE NUMBER OF FRAMES :");
           scanf("%d",&no);
 for(i=0;i<no;i++)
           frame[i]= -1;
                   j=0;
                   printf("\tref string\t page frames\n");
 for(i=1;i<=n;i++)
                   {
                           printf("%d\t\t",a[i]);
                           avail=0;
                           for(k=0;k<no;k++)
 if(frame[k]==a[i])
                                    avail=1;
                           if (avail==0)
                           {
                                    frame[j]=a[i];
                                    j=(j+1)%no;
                                    count++;
                                    for(k=0;k<no;k++)
                                    printf("%d\t",frame[k]);
 }
                           printf("\n");
 }
                   printf("Page Fault Is %d",count);
 return 0;
    }
 Output:




 b) LRU


#include<stdio.h>
int i,j,nof,nor,flag=0,ref[50],frm[50],pf=0,victim=-1;
int recent[10],lrucal[50],count=0;
int lruvictim();
void main()
{
printf("\n\t\t\t LRU PAGE REPLACEMENT ALGORITHM");
printf("\n Enter no.of Frames....");
scanf("%d",&nof);
printf(" Enter no.of reference string..");
scanf("%d",&nor);
printf("\n Enter reference string..");
for(i=0;i<nor;i++)
scanf("%d",&ref[i]);
printf("\n\n\t\t LRU PAGE REPLACEMENT ALGORITHM ");
printf("\n\t The given reference string:");
printf("\n………………………………..");
for(i=0;i<nor;i++)
printf("%4d",ref[i]);
for(i=1;i<=nof;i++)
{
frm[i]=-1;
lrucal[i]=0;
} for(i=0;i<10;i++)
recent[i]=0;
printf("\n");
for(i=0;i<nor;i++)
{
flag=0;
printf("\n\t Reference NO %d->\t",ref[i]);

for(j=0;j<nof;j++)
{
if(frm[j]==ref[i])
{
flag=1;
break;
}
}
if(flag==0)
{
count++;
if(count<=nof)
victim++;
else
victim=lruvictim();
pf++;
frm[victim]=ref[i];
for(j=0;j<nof;j++)
printf("%4d",frm[j]);
}
recent[ref[i]]=i;
}
printf("\n\n\t No.of page faults...%d",pf);
}
int lruvictim()
{
int i,j,temp1,temp2;
for(i=0;i<nof;i++)
{
temp1=frm[i];
lrucal[i]=recent[temp1];
}
temp2=lrucal[0];
for(j=1;j<nof;j++)
{
if(temp2>lrucal[j])
temp2=lrucal[j];
}
for(i=0;i<nof;i++)
if(ref[temp2]==frm[i])
return i;
return 0;
   }
Output:
                                        Program-8
                Simulate following File Organization Techniques
a) Single level directory


#include<stdlib.h>
#include<string.h>
#include<stdio.h>
struct
{
char dname[10],fname[10][10];
int fcnt;
}dir;
void main()
{
int i,ch;
char f[30];
dir.fcnt = 0;
printf("\nEnter name of directory -- ");
scanf("%s", dir.dname);
while(1)
{
printf("\n\n1. Create File\t2. Delete File\t3. Search File \n 4. Display Files\t5. Exit\nEnter your choice
   -- ");
scanf("%d",&ch);
switch(ch)
{
case 1: printf("\nEnter the name of the file -- ");
scanf("%s",dir.fname[dir.fcnt]);
dir.fcnt++;
break;
case 2: printf("\nEnter the name of the file -- ");
scanf("%s",f);
for(i=0;i<dir.fcnt;i++)
{
if(strcmp(f, dir.fname[i])==0)
{
printf("File %s is deleted ",f);
strcpy(dir.fname[i],dir.fname[dir.fcnt-1]); break; } }
if(i==dir.fcnt) printf("File %s not found",f);
else
dir.fcnt--;
break;
case 3: printf("\nEnter the name of the file -- ");
scanf("%s",f);
for(i=0;i<dir.fcnt;i++)
{
if(strcmp(f, dir.fname[i])==0)
{
printf("File %s is found ", f);
break;
}
}
if(i==dir.fcnt)
printf("File %s not found",f);
break;
case 4: if(dir.fcnt==0)
printf("\nDirectory Empty");
else
{
printf("\nThe Files are -- ");
for(i=0;i<dir.fcnt;i++)
printf("\t%s",dir.fname[i]);
}
break;
default: exit(0);
}
}
  }

  Output:
b) Two-Level Directory
 #include<string.h>
 #include<stdlib.h>
 #include<stdio.h>

 struct
 {
 char dname[10],fname[10][10];
 int fcnt;
 }dir[10];
 void main()
 {
 int i,ch,dcnt,k;
 char f[30], d[30];
 dcnt=0;
 while(1)
 {
 printf("\n\n1. Create Directory\t2. Create File\t3. Delete File");
 printf("\n4. Search File\t\t5. Display\t6. Exit\tEnter your choice -- ");
 scanf("%d",&ch);
 switch(ch)
 {
 case 1: printf("\nEnter name of directory -- ");
 scanf("%s", dir[dcnt].dname);
 dir[dcnt].fcnt=0;
 dcnt++;
 printf("Directory created");
 break;
 case 2: printf("\nEnter name of the directory -- ");
 scanf("%s",d);
 for(i=0;i<dcnt;i++)
 if(strcmp(d,dir[i].dname)==0)
 {
 printf("Enter name of the file -- ");
 scanf("%s",dir[i].fname[dir[i].fcnt]);
 printf("File created");
 break;
 }
 if(i==dcnt)
 printf("Directory %s not found",d);
 break;
 case 3: printf("\nEnter name of the directory -- ");
 scanf("%s",d);
 for(i=0;i<dcnt;i++)
 {
 if(strcmp(d,dir[i].dname)==0)
 {
 printf("Enter name of the file -- ");
 scanf("%s",f);
 for(k=0;k<dir[i].fcnt;k++)
 {
 if(strcmp(f, dir[i].fname[k])==0)
 {
 printf("File %s is deleted ",f);
 dir[i].fcnt--;
strcpy(dir[i].fname[k],dir[i].fname[dir[i].fcnt]);
goto jmp;
}
}
printf("File %s not found",f);
goto jmp;
}
}
printf("Directory %s not found",d);
jmp : break;
case 4: printf("\nEnter name of the directory -- ");
scanf("%s",d);
for(i=0;i<dcnt;i++)
{
if(strcmp(d,dir[i].dname)==0)
{
printf("Enter the name of the file -- ");
scanf("%s",f);
for(k=0;k<dir[i].fcnt;k++)
{
if(strcmp(f, dir[i].fname[k])==0)
{
printf("File %s is found ",f);
goto jmp1;
}
}
printf("File %s not found",f);
goto jmp1;
}
}
printf("Directory %s not found",d);
jmp1: break;
case 5: if(dcnt==0)
printf("\nNo Directory's ");
else
{
printf("\nDirectory\tFiles");
for(i=0;i<dcnt;i++)
{
printf("\n%s\t\t",dir[i].dname);
for(k=0;k<dir[i].fcnt;k++)
printf("\t%s",dir[i].fname[k]);
}
}
break;
default:exit(0);
}
}
   }
Output:
                                   Program-9
        Develop a C program to simulate the Linked file allocation strategies.
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
void main()
{
int f[50], p,i, st, len, j, c, k, a;
clrscr();
for(i=0;i<50;i++)
f[i]=0;
printf("Enter how many blocks already allocated: ");
scanf("%d",&p);
printf("Enter blocks already allocated: ");
for(i=0;i<p;i++)
{
scanf("%d",&a);
f[a]=1;
}
x: printf("Enter index starting block and length: ");
scanf("%d%d", &st,&len);
k=len;
if(f[st]==0)
{
for(j=st;j<(st+k);j++)
{
if(f[j]==0)
{
f[j]=1;
printf("%d-------->%d\n",j,f[j]);
}
else
{
printf("%d Block is already allocated \n",j);
k++;
}
}
}
else
printf("%d starting block is already allocated \n",st);
printf("Do you want to enter more file(Yes - 1/No - 0)");
scanf("%d", &c);
if(c==1)
goto x;
else
exit(0);
getch();
}
Output:
                                     Program-10
           Develop a C program to simulate SCAN disk scheduling algorithm.
#include <stdio.h>
int request[50];
int SIZE;
int pre;
int head;
int uptrack;
int downtrack;
struct max{
   int up;
   int down;
} kate[50];
int dist(int a, int b){
   if (a > b)
      return a - b;
   return b - a;
}
void sort(int n){
   int i, j;
   for (i = 0; i < n - 1; i++){
      for (j = 0; j < n - i - 1; j++){
          if (request[j] > request[j + 1]){
             int temp = request[j];
             request[j] = request[j + 1];
             request[j + 1] = temp;
          }
      }
   }
   j = 0;
   i = 0;
   while (request[i] != head){
      kate[j].down = request[i];
      j++;
      i++;
   }
   downtrack = j;
   i++;
   j = 0;
   while (i < n){
      kate[j].up = request[i];
      j++;
      i++;
   }
   uptrack = j;
}
void scan(int n){
   int i;
   int seekcount = 0;
   printf("SEEK SEQUENCE = ");
   sort(n);
   if (pre < head){

     for (i = 0; i < uptrack; i++){
     printf("%d ", head);
     seekcount = seekcount + dist(head, kate[i].up);
     head = kate[i].up;
   }
   for (i = downtrack - 1; i > 0; i--){
      printf("%d ", head);
      seekcount = seekcount + dist(head, kate[i].down);
      head = kate[i].down;
   }
 }
 else{
    for (i = downtrack - 1; i >= 0; i--){
       printf("%d ", head);
       seekcount = seekcount + dist(head, kate[i].down);
       head = kate[i].down;
    }
    for (i = 0; i < uptrack - 1; i++){
       printf("%d ", head);
       seekcount = seekcount + dist(head, kate[i].up);
       head = kate[i].up;
    }
 }
 printf(" %d\nTOTAL DISTANCE :%d", head, seekcount);
}
int main(){
   int n, i;
   printf("ENTER THE DISK SIZE :\n");
   scanf("%d", &SIZE);
   printf("ENTER THE NO OF REQUEST SEQUENCE :\n");
   scanf("%d", &n);
   printf("ENTER THE REQUEST SEQUENCE :\n");
   for (i = 0; i < n; i++)
      scanf("%d", &request[i]);
   printf("ENTER THE CURRENT HEAD :\n");
   scanf("%d", &head);
   request[n] = head;
   request[n + 1] = SIZE - 1;
   request[n + 2] = 0;
   printf("ENTER THE PRE REQUEST :\n");
   scanf("%d", &pre);
   scan(n + 3);
  }
Output:
